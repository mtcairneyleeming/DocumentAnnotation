// <auto-generated />
using System;
using DocumentAnnotation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DocumentAnnotation.Migrations
{
    [DbContext(typeof(AnnotationContext))]
    [Migration("20181024150838_LinkShorteners")]
    partial class LinkShorteners
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DocumentAnnotation.Models.Annotation", b =>
                {
                    b.Property<int>("AnnotationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<int>("DocumentId");

                    b.Property<string>("Title");

                    b.HasKey("AnnotationId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("DocumentAnnotation.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DocumentAnnotation.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string[]>("AllowedUsers");

                    b.Property<string>("Name");

                    b.Property<int>("TextId");

                    b.Property<string>("UserId");

                    b.Property<int>("Visibility");

                    b.HasKey("DocumentId");

                    b.HasIndex("TextId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentAnnotations");
                });

            modelBuilder.Entity("DocumentAnnotation.Models.Highlight", b =>
                {
                    b.Property<int>("HighlightId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnnotationId");

                    b.HasKey("HighlightId");

                    b.HasIndex("AnnotationId");

                    b.ToTable("Highlights");
                });

            modelBuilder.Entity("DocumentAnnotation.Models.LinkShortener", b =>
                {
                    b.Property<int>("LinkShortenerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OriginalLink");

                    b.Property<string>("ShortLink");

                    b.HasKey("LinkShortenerId");

                    b.ToTable("LinkShorteners");
                });

            modelBuilder.Entity("DocumentAnnotation.Models.TextData", b =>
                {
                    b.Property<int>("TextId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Author");

                    b.Property<string>("Identifier");

                    b.Property<string>("Title");

                    b.HasKey("TextId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DocumentAnnotation.Models.Annotation", b =>
                {
                    b.HasOne("DocumentAnnotation.Models.Document", "Document")
                        .WithMany("Annotations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DocumentAnnotation.Models.Document", b =>
                {
                    b.HasOne("DocumentAnnotation.Models.TextData", "Text")
                        .WithMany()
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DocumentAnnotation.Models.AppUser", "User")
                        .WithMany("DocumentAnnotations")
                        .HasForeignKey("UserId");

                    b.OwnsOne("DocumentAnnotation.Models.Location", "LastLocation", b1 =>
                        {
                            b1.Property<int>("DocumentId");

                            b1.Property<int>("BookNumber");

                            b1.Property<bool>("Exact");

                            b1.Property<int>("GroupNumber");

                            b1.Property<int>("SectionNumber");

                            b1.Property<int>("WordNumber");

                            b1.ToTable("DocumentAnnotations");

                            b1.HasOne("DocumentAnnotation.Models.Document")
                                .WithOne("LastLocation")
                                .HasForeignKey("DocumentAnnotation.Models.Location", "DocumentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DocumentAnnotation.Models.Highlight", b =>
                {
                    b.HasOne("DocumentAnnotation.Models.Annotation", "Annotation")
                        .WithMany("Highlights")
                        .HasForeignKey("AnnotationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DocumentAnnotation.Models.Location", "Location", b1 =>
                        {
                            b1.Property<int>("HighlightId");

                            b1.Property<int>("BookNumber");

                            b1.Property<bool>("Exact");

                            b1.Property<int>("GroupNumber");

                            b1.Property<int>("SectionNumber");

                            b1.Property<int>("WordNumber");

                            b1.ToTable("Highlights");

                            b1.HasOne("DocumentAnnotation.Models.Highlight")
                                .WithOne("Location")
                                .HasForeignKey("DocumentAnnotation.Models.Location", "HighlightId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DocumentAnnotation.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DocumentAnnotation.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DocumentAnnotation.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DocumentAnnotation.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
