@page
@using Extensions
@using server.Extensions
@using TextLoader.Models
@model Annotate.ViewerModel

@{
    ViewData["Title"] = Model.TextData.Title + ", " + Model.TextData.Author;
}

@section Styles {
    <link rel="stylesheet" type="text/css" href="~/css/highlight.css"/>
}

@section Scripts {
    <script src="~/js/konva.min.js"></script>
    <script type="text/javascript">
        const annotationLines = [];

        function draw() {
            const contentContainer = document.getElementById("contentContainer");
            const foregroundContainer = document.getElementById("foregroundContainer");
            const backgroundContainer = document.getElementById("backgroundContainer");

            const Konva = window.Konva;
            const stage = new Konva.Stage({
                container: "backgroundContainer",
                width: contentContainer.clientWidth,
                height: contentContainer.clientHeight
            });

            const layer = new Konva.Layer();


            // draw lines from a highlight to the annotation comment

            const groups = document.getElementsByClassName("group");
            const canvasRect = contentContainer.getBoundingClientRect();
            annotationLines.length = 0; // clear previous lines

            for (let group of groups) {
                for (let span of group.children) {

                    if (span.dataset.ids) { // if annotated

                        const ids = span.dataset.ids.split(",").map(id => parseInt(id, 10));

                        const spanRect = span.getBoundingClientRect();
                        // drawing from bottom right corner:
                        const spanBottomRight = {
                            x: spanRect.right - canvasRect.left + 15, // adapt for margins
                            y: spanRect.bottom - canvasRect.top
                        };
                        for (let id of ids) {
                            const annotationDesc = document.getElementById(`annotation${id}`);
                            const annRect = annotationDesc.getBoundingClientRect();
                            const annLeftMiddle = {
                                x: annRect.left - canvasRect.left + 15, // adapt for margins
                                y: annRect.top - (0.5 * (annRect.top - annRect.bottom)) - canvasRect.top
                            };
                            const lineColour = annotationDesc.dataset.annColour;


                            const line = new Konva.Line({
                                points: [spanBottomRight.x, spanBottomRight.y, annLeftMiddle.x, annLeftMiddle.y],
                                stroke: lineColour,
                                strokeWidth: 1,
                                dash: [5, 15]
                            });
                            annotationLines.push({ annId: id, spanId: span.id, line: line });
                            layer.add(annotationLines.find(l => l.annId === id && l.spanId === span.id).line);
                        }

                        // add mouseover handlers to emphasise the links between highlights and annotations
                        $(span).hover(
                            () => {
                                annotationLines.find(l => l.spanId === span.id).line.dash([10, 0]);
                                layer.draw();
                            },
                            () => {
                                annotationLines.find(l => l.spanId === span.id).line.dash([5, 15]);
                                layer.draw();
                            });
                    }
                }
            }
            for (let annDesc of document.getElementById("annotationContainer").children) {
                const id = parseInt(annDesc.dataset.annId, 10);
                $(annDesc).hover(
                    () => {
                        annotationLines.find(l => l.annId === id).line.dash([10, 0]);
                        layer.draw();
                    },
                    () => {
                        annotationLines.find(l => l.annId === id).line.dash([5, 15]);
                        layer.draw();
                    });
            }
            layer.draw();
            stage.add(layer);
            stage.draw();

        }

        // pass data to JS
        textNames = @JavaScriptConvert.SerializeObject(Model._loader.CloneNames(Model.FullText.Identifier));
        bookId = "@Model.Book.Name";
        sectionId = "@Model.Section.Name";
       
        $(window).on('load',
            function() {
                draw();
                initialiseSelects(textNames, bookId);
            });
        $(window).resize(function() {
            draw();
        });
    </script>
}

<div class="row">
    <div id="contentContainer" class="col-lg-9 col-md-12 col-sm-12 col-xs-12">
        <div id="title">
        <h2>@(Model.TextData.Title + ", " + Model.TextData.Author)</h2>

        <h3>Annotations on Book @Html.DisplayFor(m => m.Book.Name), Section @Html.DisplayFor(m => m.Section.Name)</h3>
            <hr/>
        </div>
        <div id="container-fluid">
            <div id="foregroundContainer" class="row no-gutters">
                <div class="col-lg-8 col-md-8 col-sm-9 col-xs-12">

                    <p id="groupContainer">
                        @for (var i = 0; i < Model.Groups.Count; i++)
                        {
                            var formattedPairs = Model.Annotator.TransformedData[i];
                            <span class="group" id="group@(i)">
                                @{
                                    // for each small section of the group that needs certain highlights applied to it
                                    for (var j = 0; j < formattedPairs.Count; j++)
                                    {
                                        var formattedPair = formattedPairs[j];
                                        // data-ids is added to make it easier to draw lines to and from 
                                        <span
                                            id="@(i):@(j)"
                                            data-ids="@string.Join(",", formattedPair.AnnotationIds.ToArray())"
                                            class="@string.Join(' ', formattedPair.Classes.ToArray())">
                                            @Model.Groups[i].Data.Substring(formattedPair.Pair.Start,
                                                formattedPair.Pair.End - formattedPair.Pair.Start)
                                        </span>
                                    }
                                }
                                @* finish off group*@
                                @(Model.Groups[i].AddNewLine ? "\n" : "")
                            </span>
                        }
                    </p>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-3 col-xs-12">
                    <div id="annotationContainer">
                        @foreach (var annotation in Model.Annotator.Annotations)
                        {
                            <p id="annotation@(annotation.AnnotationId)" data-ann-id="@annotation.AnnotationId" data-ann-colour="@Model.Annotator.GetColourName(annotation.AnnotationId)">
                                @if (!string.IsNullOrEmpty(annotation.Title))
                                {
                                    <strong>@annotation.Title:</strong>
                                }
                                @annotation.Body
                            </p>
                        }
                    </div>
                </div>
            </div>
            <div id="backgroundContainer">
                @*Must stay, to hold the canvas for drawing*@
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-4 col-sm-8 col-xs-12">
        @await Html.PartialAsync("Partials/TextNavigation")
        @await Html.PartialAsync("Partials/DocumentDetails", Model.DocAnn)
        @await Html.PartialAsync("Partials/TextDetails", new TextDetails(Model.TextData, Model.Book.Name, Model.Section.Name))
    </div>
</div>